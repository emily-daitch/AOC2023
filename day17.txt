//WIP
//P1 credit ranikola
function solve(input) {
    return [process(parse(input), 0, 1), process(parse(input), 1, 1)];
  }
  
  function parse(input) {
    return input.split("\n").map((l) => l.split("").map(Number));
  }
  
  function process(grid, part, draw) {
    class Grid {
      data = {};
  
      set(val, x, y = 0, z = 0, zz = 0) {
        if (!this.data[zz]) this.data[zz] = {};
        if (!this.data[zz][z]) this.data[zz][z] = {};
        if (!this.data[zz][z][y]) this.data[zz][z][y] = {};
        this.data[zz][z][y][x] = val;
        this.lastPos = [x, y, z, zz];
        return val;
      }
  
      get(x, y = 0, z = 0, zz = 0) {
        return this.data[zz]?.[z]?.[y]?.[x];
      }
    }
  
    const timeSlots = [[]];
    function enqueue(time, x, y, dir, dirDist, prev) {
      if (!timeSlots[time]) timeSlots[time] = [];
      timeSlots[time].push({x, y, dir, dirDist, prev});
    }
  
    let curTime = 0;
    enqueue(curTime, 0, 0, -1, part ? 4 : 0, null);
  
    const visited = new Grid();
    const d = [[-1, 0], [0, -1], [1, 0], [0, 1]];
  
    main: while (true) {
      while (timeSlots[curTime] && timeSlots[curTime].length) {
        const cur = timeSlots[curTime].pop();
  
        if (visited.get(cur.x, cur.y, cur.dir, cur.dirDist) !== undefined)
          continue;
  
        visited.set(cur.prev, cur.x, cur.y, cur.dir, cur.dirDist);
  
        for (let i = 0; i < 4; i++) {
          const [dx, dy] = d[i];
          if (cur.dir === (i + 2) % 4) continue;
          const turn = i !== cur.dir;
          if (!turn && cur.dirDist >= (part ? 10 : 3)) continue;
          if (part && turn && cur.dirDist < 4) continue;
          if (cur.x === grid[0].length - 1 && cur.y === grid.length - 1)
            break main;
  
          const x = cur.x + dx,
            y = cur.y + dy;
          if (x < 0 || y < 0 || x >= grid[0].length || y >= grid.length) continue;
          const time = curTime + grid[y][x];
          enqueue(time, x, y, i, turn ? 1 : cur.dirDist + 1, [cur.x, cur.y, cur.dir, cur.dirDist]);
        }
      }
      curTime++;
    }
  
    const path = getPath(visited, ...visited.lastPos);
    if (draw) console.info("\n" + drawCanvas(getCanvas(path)));
    return curTime;
  }
  
  function getPath(visited, x, y, z, zz) {
    const path = [[x, y, z, zz]];
    while (true) {
      const node = visited.get(x, y, z, zz);
      if (node === null) break;
      path.push(node);
      [x, y, z, zz] = node;
    }
    return path.reverse();
  }
  
  function getCanvas(path) {
    const dMap = ["<", "^", ">", "v"];
    let maxX = -Infinity,
      maxY = -Infinity;
    for (const [x, y, _] of path) {
      if (x > maxX) maxX = x;
      if (y > maxY) maxY = y;
    }
    const canvas = new Array(maxY + 1)
      .fill()
      .map(() => new Array(maxX + 1).fill("."));
    for (let i = 0; i < path.length; i++) {
      const [x, y] = path[i];
      if (x < 0 || y < 0) continue;
      const z = path[i + 1]?.[2] ?? "#";
      canvas[y][x] = dMap[z] || z;
    }
    return canvas;
  }
  
  function drawCanvas(canvas) {
    return canvas.map((r) => r.join("")).join("\n");
  }

  console.log(solve(input));
//P2 credit wheresmylart
PrioQueue = class { //a basic priority queue class with custom metric.
  //(a,b)=>a.prio-b.prio gives a max heap.
  //prio should not be changed after insertion.
  
  //helper functions, not to be used outside
  swap(a,b) { //swap heap[a] and heap[b], then return b
    let tmp = this.heap[a];
    this.heap[a] = this.heap[b];
    this.heap[b] = tmp;
    return b;
  }
  parent(pos) {
    return Math.floor((pos-1)/2);
  }
  higherChild(pos) { //index of the higher child of pos, or null if it has none. if equal, prefers left
    //children are n*2+1, n*2+2
    if (pos >= (this.heap.length-2)/2) return null;
    if (this.cmp(pos*2+1, pos*2+2) < 0) return pos*2+2;
    return pos*2+1;
  }
  cmp(p1,p2) { //compare heap[p1] and heap[p2] with metr
    return this.metr(this.heap[p1],this.heap[p2]);
  }
  
  //main functions
  constructor(metr) {
    if (metr == undefined) metr = (a,b)=>a-b;
    
    this.metr = metr;
    this.heap = [];
  }
  push(item) {
    let itempos = this.heap.length;
    this.heap.push(item);
    
    while (itempos > 0 && this.cmp(itempos,this.parent(itempos)) > 0) {
      itempos = this.swap(itempos,this.parent(itempos));
    }
  }
  pop() {
    this.swap(0,this.heap.length-1);
    let pos = 0;
    let item = this.heap.pop();
    
    while (this.higherChild(pos) && this.cmp(pos,this.higherChild(pos)) < 0) {
      pos = this.swap(pos,this.higherChild(pos));
    }
    return item;
  }
}
function d17() {
  let inp = document.body.innerText.trim().split("\n");
  //let inp = ["2413432311323","3215453535623","3255245654254","3446585845452","4546657867536","1438598798454","4457876987766","3637877979653","4654967986887","4564679986453","1224686865563","2546548887735","4322674655533"]
  
  let pq = new PrioQueue((a,b)=>b[0]-a[0]);
  pq.push([0,0,0,0]); //dist,y,x,dir
  pq.push([0,0,0,1]); //dir: 0 is horiz, 1 is vert
  let seen = {};
  let ret = 0;
  let gm = (y,x)=>{
    if (y<0 || y>=inp.length || x<0 || x>=inp[y].length) return 1e99;
    return +(inp[y][x]);
  }
  
  while (pq.heap.length>0) {
    let [dist,y,x,dir] = pq.pop();
    //console.log([dist,y,x,dir])
    if (y<0 || y>=inp.length || x<0 || x>=inp[y].length) continue;
    if (seen[y+","+x+","+dir] != undefined) continue;
    seen[y+","+x+","+dir] = dist;
    if (y == inp.length-1 && x == inp[y].length-1) {
      return dist;
    }
    
    let cd;
    if (dir==0) {
      cd = dist;
      for (let i=1;i<=10;i++) {
        cd += gm(y,x+i);
        if (cd>1e90) break;
        if (i<4) continue;
				pq.push([cd,y,x+i,1]);
      }
      cd = dist;
      for (let i=1;i<=10;i++) {
        cd += gm(y,x-i);
        if (cd>1e90) break;
        if (i<4) continue;
				pq.push([cd,y,x-i,1]);
      }
    } else if (dir == 1) {
      cd = dist;
      for (let i=1;i<=10;i++) {
        cd += gm(y+i,x);
        if (cd>1e90) break;
        if (i<4) continue;
				pq.push([cd,y+i,x,0]);
      }
      cd = dist;
      for (let i=1;i<=10;i++) {
        cd += gm(y-i,x);
        if (cd>1e90) break;
        if (i<4) continue;
				pq.push([cd,y-i,x,0]);
      }
    }
  }
}
d17()
